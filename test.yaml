
apiVersion: v1
kind: Pod
metadata:
  name: aeneria
spec:
  securityContext:
    # runAsUser: 1000
    # runAsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  containers:
  - name: db
    image: docker.io/library/postgres:12
    env:
    - name: POSTGRES_DB
      value: aeneria
    - name: POSTGRES_USER
      value: aeneria
    - name: POSTGRES_PASSWORD
      value: aeneria
    securityContext:
      fsGroup: 999
      runAsUser: 999
      runAsGroup: 999
      capabilities:
        drop:
        - ALL
    volumeMounts:
    - name: pgdata
      mountPath: /var/lib/postgresql/data
    - name: pgrun
      mountPath: /var/run/postgresql
  - name: app
    image: 0fa68b66f1a
    env:
    - name: DATABASE_URL
      value: postgresql://aeneria:aeneria@localhost:5432/aeneria
    - name: FPM_DISPLAY_ERRORS
      value: "1"
    # - name: FPM_LOGLEVEL
    #   value: info
    - name: PHP_LOG_ERRORS
      value: "1"
    - name: PHP_DISPLAY_ERRORS
      value: "1"
    - name: APP_SECRET
      value: fake
    securityContext:
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    volumeMounts:
    - name: tmp
      mountPath: /tmp
  - name: front
    image: bbcc8882997
    livenessProbe:
      httpGet:
        path: /
        port: 8080
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 60
      timeoutSeconds: 3
    ports:
    - name: http
      containerPort: 8080
      protocol: TCP
    securityContext:
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    volumeMounts:
    - name: tmp
      mountPath: /tmp
  volumes:
  - name: tmp
    emptyDir: {}
  - name: pgdata
    emptyDir: {}
  - name: pgrun
    emptyDir: {}
  restartPolicy: Always
